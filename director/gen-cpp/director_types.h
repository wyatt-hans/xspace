/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef director_TYPES_H
#define director_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>



namespace xspace { namespace director {

struct SpaceType {
  enum type {
    SPACE_TYPE_FILE = 0,
    SPACE_TYPE_TABLE = 1,
    SPACE_TYPE_OBJECT = 2
  };
};

typedef struct _AddressPair__isset {
  _AddressPair__isset() : addr(false), port(false) {}
  bool addr;
  bool port;
} _AddressPair__isset;

class AddressPair {
 public:

  static const char* ascii_fingerprint; // = "EEBC915CE44901401D881E6091423036";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

  AddressPair() : addr(""), port(0) {
  }

  virtual ~AddressPair() throw() {}

  std::string addr;
  int32_t port;

  _AddressPair__isset __isset;

  bool operator == (const AddressPair & rhs) const
  {
    if (!(addr == rhs.addr))
      return false;
    if (!(port == rhs.port))
      return false;
    return true;
  }
  bool operator != (const AddressPair &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AddressPair & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SpaceInfoRsp__isset {
  _SpaceInfoRsp__isset() : ret(false), id(false), type(false), cred(false), locate(false) {}
  bool ret;
  bool id;
  bool type;
  bool cred;
  bool locate;
} _SpaceInfoRsp__isset;

class SpaceInfoRsp {
 public:

  static const char* ascii_fingerprint; // = "B18178EB966128B05D5E434CD96368D9";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0x81,0x78,0xEB,0x96,0x61,0x28,0xB0,0x5D,0x5E,0x43,0x4C,0xD9,0x63,0x68,0xD9};

  SpaceInfoRsp() : ret(0), id(0), cred("") {
  }

  virtual ~SpaceInfoRsp() throw() {}

  int32_t ret;
  int64_t id;
  SpaceType::type type;
  std::string cred;
  std::vector<AddressPair>  locate;

  _SpaceInfoRsp__isset __isset;

  bool operator == (const SpaceInfoRsp & rhs) const
  {
    if (!(ret == rhs.ret))
      return false;
    if (!(id == rhs.id))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(cred == rhs.cred))
      return false;
    if (!(locate == rhs.locate))
      return false;
    return true;
  }
  bool operator != (const SpaceInfoRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SpaceInfoRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SpaceListRsp__isset {
  _SpaceListRsp__isset() : ret(false), spaces(false) {}
  bool ret;
  bool spaces;
} _SpaceListRsp__isset;

class SpaceListRsp {
 public:

  static const char* ascii_fingerprint; // = "B8D94EBFFE99C6E7010418EB2DF36DC3";
  static const uint8_t binary_fingerprint[16]; // = {0xB8,0xD9,0x4E,0xBF,0xFE,0x99,0xC6,0xE7,0x01,0x04,0x18,0xEB,0x2D,0xF3,0x6D,0xC3};

  SpaceListRsp() : ret(0) {
  }

  virtual ~SpaceListRsp() throw() {}

  int32_t ret;
  std::vector<std::string>  spaces;

  _SpaceListRsp__isset __isset;

  bool operator == (const SpaceListRsp & rhs) const
  {
    if (!(ret == rhs.ret))
      return false;
    if (!(spaces == rhs.spaces))
      return false;
    return true;
  }
  bool operator != (const SpaceListRsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SpaceListRsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MgmtUserInfo__isset {
  _MgmtUserInfo__isset() : uid(false), name(false), passwd(false) {}
  bool uid;
  bool name;
  bool passwd;
} _MgmtUserInfo__isset;

class MgmtUserInfo {
 public:

  static const char* ascii_fingerprint; // = "BC9C141275D96A1BDFC4A1F500B2DCBE";
  static const uint8_t binary_fingerprint[16]; // = {0xBC,0x9C,0x14,0x12,0x75,0xD9,0x6A,0x1B,0xDF,0xC4,0xA1,0xF5,0x00,0xB2,0xDC,0xBE};

  MgmtUserInfo() : uid(0), name(""), passwd("") {
  }

  virtual ~MgmtUserInfo() throw() {}

  int64_t uid;
  std::string name;
  std::string passwd;

  _MgmtUserInfo__isset __isset;

  bool operator == (const MgmtUserInfo & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(passwd == rhs.passwd))
      return false;
    return true;
  }
  bool operator != (const MgmtUserInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MgmtUserInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

}} // namespace

#endif
