/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef MetaService_H
#define MetaService_H

#include <TProcessor.h>
#include "director_types.h"

namespace xspace { namespace director {

class MetaServiceIf {
 public:
  virtual ~MetaServiceIf() {}
  virtual bool Setup(const int64_t id, const std::string& cred) = 0;
  virtual void Close() = 0;
};

class MetaServiceNull : virtual public MetaServiceIf {
 public:
  virtual ~MetaServiceNull() {}
  bool Setup(const int64_t /* id */, const std::string& /* cred */) {
    bool _return = false;
    return _return;
  }
  void Close() {
    return;
  }
};

typedef struct _MetaService_Setup_args__isset {
  _MetaService_Setup_args__isset() : id(false), cred(false) {}
  bool id;
  bool cred;
} _MetaService_Setup_args__isset;

class MetaService_Setup_args {
 public:

  MetaService_Setup_args() : id(0), cred("") {
  }

  virtual ~MetaService_Setup_args() throw() {}

  int64_t id;
  std::string cred;

  _MetaService_Setup_args__isset __isset;

  bool operator == (const MetaService_Setup_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(cred == rhs.cred))
      return false;
    return true;
  }
  bool operator != (const MetaService_Setup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MetaService_Setup_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MetaService_Setup_pargs {
 public:


  virtual ~MetaService_Setup_pargs() throw() {}

  const int64_t* id;
  const std::string* cred;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MetaService_Setup_result__isset {
  _MetaService_Setup_result__isset() : success(false) {}
  bool success;
} _MetaService_Setup_result__isset;

class MetaService_Setup_result {
 public:

  MetaService_Setup_result() : success(0) {
  }

  virtual ~MetaService_Setup_result() throw() {}

  bool success;

  _MetaService_Setup_result__isset __isset;

  bool operator == (const MetaService_Setup_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MetaService_Setup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MetaService_Setup_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MetaService_Setup_presult__isset {
  _MetaService_Setup_presult__isset() : success(false) {}
  bool success;
} _MetaService_Setup_presult__isset;

class MetaService_Setup_presult {
 public:


  virtual ~MetaService_Setup_presult() throw() {}

  bool* success;

  _MetaService_Setup_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class MetaService_Close_args {
 public:

  MetaService_Close_args() {
  }

  virtual ~MetaService_Close_args() throw() {}


  bool operator == (const MetaService_Close_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MetaService_Close_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MetaService_Close_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MetaService_Close_pargs {
 public:


  virtual ~MetaService_Close_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MetaService_Close_result {
 public:

  MetaService_Close_result() {
  }

  virtual ~MetaService_Close_result() throw() {}


  bool operator == (const MetaService_Close_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MetaService_Close_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MetaService_Close_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MetaService_Close_presult {
 public:


  virtual ~MetaService_Close_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class MetaServiceClient : virtual public MetaServiceIf {
 public:
  MetaServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  MetaServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool Setup(const int64_t id, const std::string& cred);
  void send_Setup(const int64_t id, const std::string& cred);
  bool recv_Setup();
  void Close();
  void send_Close();
  void recv_Close();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class MetaServiceProcessor : virtual public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<MetaServiceIf> iface_;
  virtual bool process_fn(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, int socket);
 private:
  std::map<std::string, void (MetaServiceProcessor::*)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*)> processMap_;
  void process_Setup(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_Close(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
 public:
  MetaServiceProcessor(boost::shared_ptr<MetaServiceIf> iface) :
    iface_(iface) {
    processMap_["Setup"] = &MetaServiceProcessor::process_Setup;
    processMap_["Close"] = &MetaServiceProcessor::process_Close;
  }

  virtual bool process(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot, int socket);
  virtual ~MetaServiceProcessor() {}
};

class MetaServiceMultiface : virtual public MetaServiceIf {
 public:
  MetaServiceMultiface(std::vector<boost::shared_ptr<MetaServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MetaServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<MetaServiceIf> > ifaces_;
  MetaServiceMultiface() {}
  void add(boost::shared_ptr<MetaServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool Setup(const int64_t id, const std::string& cred) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->Setup(id, cred);
      } else {
        ifaces_[i]->Setup(id, cred);
      }
    }
  }

  void Close() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->Close();
    }
  }

};

}} // namespace

#endif
