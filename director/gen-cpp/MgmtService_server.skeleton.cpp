// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "MgmtService.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace xspace::director;

class MgmtServiceHandler : virtual public MgmtServiceIf {
 public:
  MgmtServiceHandler() {
    // Your initialization goes here
  }

  bool Setup(const std::string& name, const std::string& passwd) {
    // Your implementation goes here
    printf("Setup\n");
  }

  void Close() {
    // Your implementation goes here
    printf("Close\n");
  }

  bool CreateUser(const std::string& name, const std::string& passwd) {
    // Your implementation goes here
    printf("CreateUser\n");
  }

  bool DeleteUser(const std::string& name) {
    // Your implementation goes here
    printf("DeleteUser\n");
  }

  void GetUserInfo(MgmtUserInfo& _return, const std::string& name) {
    // Your implementation goes here
    printf("GetUserInfo\n");
  }

  bool SetUserInfo(const std::string& name, const MgmtUserInfo& ui) {
    // Your implementation goes here
    printf("SetUserInfo\n");
  }

  bool CreateSpace(const int64_t uid, const std::string& space, const SpaceType::type type) {
    // Your implementation goes here
    printf("CreateSpace\n");
  }

  bool DeleteSpace(const int64_t uid, const std::string& space) {
    // Your implementation goes here
    printf("DeleteSpace\n");
  }

  void GetSpaceList(SpaceListRsp& _return, const int64_t uid) {
    // Your implementation goes here
    printf("GetSpaceList\n");
  }

  void GetSpaceInfo(SpaceInfoRsp& _return, const int64_t uid, const std::string& space) {
    // Your implementation goes here
    printf("GetSpaceInfo\n");
  }

  bool AddMetaServer(const std::string& addr, const int32_t port) {
    // Your implementation goes here
    printf("AddMetaServer\n");
  }

  bool RmvMetaServer(const int64_t msaid) {
    // Your implementation goes here
    printf("RmvMetaServer\n");
  }

  void GetAllMetaServer(std::vector<int64_t> & _return) {
    // Your implementation goes here
    printf("GetAllMetaServer\n");
  }

  void GetMetaServer(std::vector<int64_t> & _return, const int64_t uid, const std::string& space) {
    // Your implementation goes here
    printf("GetMetaServer\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<MgmtServiceHandler> handler(new MgmtServiceHandler());
  shared_ptr<TProcessor> processor(new MgmtServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

