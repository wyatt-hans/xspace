/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef MgmtService_H
#define MgmtService_H

#include <TProcessor.h>
#include "director_types.h"

namespace xspace { namespace director {

class MgmtServiceIf {
 public:
  virtual ~MgmtServiceIf() {}
  virtual bool Setup(const std::string& name, const std::string& passwd) = 0;
  virtual void Close() = 0;
  virtual bool CreateUser(const std::string& name, const std::string& passwd) = 0;
  virtual bool DeleteUser(const std::string& name) = 0;
  virtual void GetUserInfo(MgmtUserInfo& _return, const std::string& name) = 0;
  virtual bool SetUserInfo(const std::string& name, const MgmtUserInfo& ui) = 0;
  virtual bool CreateSpace(const int64_t uid, const std::string& space, const SpaceType::type type) = 0;
  virtual bool DeleteSpace(const int64_t uid, const std::string& space) = 0;
  virtual void GetSpaceList(SpaceListRsp& _return, const int64_t uid) = 0;
  virtual void GetSpaceInfo(SpaceInfoRsp& _return, const int64_t uid, const std::string& space) = 0;
  virtual bool AddMetaServer(const std::string& addr, const int32_t port) = 0;
  virtual bool RmvMetaServer(const int64_t msaid) = 0;
  virtual void GetAllMetaServer(std::vector<int64_t> & _return) = 0;
  virtual void GetMetaServer(std::vector<int64_t> & _return, const int64_t uid, const std::string& space) = 0;
};

class MgmtServiceNull : virtual public MgmtServiceIf {
 public:
  virtual ~MgmtServiceNull() {}
  bool Setup(const std::string& /* name */, const std::string& /* passwd */) {
    bool _return = false;
    return _return;
  }
  void Close() {
    return;
  }
  bool CreateUser(const std::string& /* name */, const std::string& /* passwd */) {
    bool _return = false;
    return _return;
  }
  bool DeleteUser(const std::string& /* name */) {
    bool _return = false;
    return _return;
  }
  void GetUserInfo(MgmtUserInfo& /* _return */, const std::string& /* name */) {
    return;
  }
  bool SetUserInfo(const std::string& /* name */, const MgmtUserInfo& /* ui */) {
    bool _return = false;
    return _return;
  }
  bool CreateSpace(const int64_t /* uid */, const std::string& /* space */, const SpaceType::type /* type */) {
    bool _return = false;
    return _return;
  }
  bool DeleteSpace(const int64_t /* uid */, const std::string& /* space */) {
    bool _return = false;
    return _return;
  }
  void GetSpaceList(SpaceListRsp& /* _return */, const int64_t /* uid */) {
    return;
  }
  void GetSpaceInfo(SpaceInfoRsp& /* _return */, const int64_t /* uid */, const std::string& /* space */) {
    return;
  }
  bool AddMetaServer(const std::string& /* addr */, const int32_t /* port */) {
    bool _return = false;
    return _return;
  }
  bool RmvMetaServer(const int64_t /* msaid */) {
    bool _return = false;
    return _return;
  }
  void GetAllMetaServer(std::vector<int64_t> & /* _return */) {
    return;
  }
  void GetMetaServer(std::vector<int64_t> & /* _return */, const int64_t /* uid */, const std::string& /* space */) {
    return;
  }
};

typedef struct _MgmtService_Setup_args__isset {
  _MgmtService_Setup_args__isset() : name(false), passwd(false) {}
  bool name;
  bool passwd;
} _MgmtService_Setup_args__isset;

class MgmtService_Setup_args {
 public:

  MgmtService_Setup_args() : name(""), passwd("") {
  }

  virtual ~MgmtService_Setup_args() throw() {}

  std::string name;
  std::string passwd;

  _MgmtService_Setup_args__isset __isset;

  bool operator == (const MgmtService_Setup_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(passwd == rhs.passwd))
      return false;
    return true;
  }
  bool operator != (const MgmtService_Setup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MgmtService_Setup_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MgmtService_Setup_pargs {
 public:


  virtual ~MgmtService_Setup_pargs() throw() {}

  const std::string* name;
  const std::string* passwd;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MgmtService_Setup_result__isset {
  _MgmtService_Setup_result__isset() : success(false) {}
  bool success;
} _MgmtService_Setup_result__isset;

class MgmtService_Setup_result {
 public:

  MgmtService_Setup_result() : success(0) {
  }

  virtual ~MgmtService_Setup_result() throw() {}

  bool success;

  _MgmtService_Setup_result__isset __isset;

  bool operator == (const MgmtService_Setup_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MgmtService_Setup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MgmtService_Setup_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MgmtService_Setup_presult__isset {
  _MgmtService_Setup_presult__isset() : success(false) {}
  bool success;
} _MgmtService_Setup_presult__isset;

class MgmtService_Setup_presult {
 public:


  virtual ~MgmtService_Setup_presult() throw() {}

  bool* success;

  _MgmtService_Setup_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class MgmtService_Close_args {
 public:

  MgmtService_Close_args() {
  }

  virtual ~MgmtService_Close_args() throw() {}


  bool operator == (const MgmtService_Close_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MgmtService_Close_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MgmtService_Close_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MgmtService_Close_pargs {
 public:


  virtual ~MgmtService_Close_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MgmtService_Close_result {
 public:

  MgmtService_Close_result() {
  }

  virtual ~MgmtService_Close_result() throw() {}


  bool operator == (const MgmtService_Close_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MgmtService_Close_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MgmtService_Close_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MgmtService_Close_presult {
 public:


  virtual ~MgmtService_Close_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MgmtService_CreateUser_args__isset {
  _MgmtService_CreateUser_args__isset() : name(false), passwd(false) {}
  bool name;
  bool passwd;
} _MgmtService_CreateUser_args__isset;

class MgmtService_CreateUser_args {
 public:

  MgmtService_CreateUser_args() : name(""), passwd("") {
  }

  virtual ~MgmtService_CreateUser_args() throw() {}

  std::string name;
  std::string passwd;

  _MgmtService_CreateUser_args__isset __isset;

  bool operator == (const MgmtService_CreateUser_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(passwd == rhs.passwd))
      return false;
    return true;
  }
  bool operator != (const MgmtService_CreateUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MgmtService_CreateUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MgmtService_CreateUser_pargs {
 public:


  virtual ~MgmtService_CreateUser_pargs() throw() {}

  const std::string* name;
  const std::string* passwd;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MgmtService_CreateUser_result__isset {
  _MgmtService_CreateUser_result__isset() : success(false) {}
  bool success;
} _MgmtService_CreateUser_result__isset;

class MgmtService_CreateUser_result {
 public:

  MgmtService_CreateUser_result() : success(0) {
  }

  virtual ~MgmtService_CreateUser_result() throw() {}

  bool success;

  _MgmtService_CreateUser_result__isset __isset;

  bool operator == (const MgmtService_CreateUser_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MgmtService_CreateUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MgmtService_CreateUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MgmtService_CreateUser_presult__isset {
  _MgmtService_CreateUser_presult__isset() : success(false) {}
  bool success;
} _MgmtService_CreateUser_presult__isset;

class MgmtService_CreateUser_presult {
 public:


  virtual ~MgmtService_CreateUser_presult() throw() {}

  bool* success;

  _MgmtService_CreateUser_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MgmtService_DeleteUser_args__isset {
  _MgmtService_DeleteUser_args__isset() : name(false) {}
  bool name;
} _MgmtService_DeleteUser_args__isset;

class MgmtService_DeleteUser_args {
 public:

  MgmtService_DeleteUser_args() : name("") {
  }

  virtual ~MgmtService_DeleteUser_args() throw() {}

  std::string name;

  _MgmtService_DeleteUser_args__isset __isset;

  bool operator == (const MgmtService_DeleteUser_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const MgmtService_DeleteUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MgmtService_DeleteUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MgmtService_DeleteUser_pargs {
 public:


  virtual ~MgmtService_DeleteUser_pargs() throw() {}

  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MgmtService_DeleteUser_result__isset {
  _MgmtService_DeleteUser_result__isset() : success(false) {}
  bool success;
} _MgmtService_DeleteUser_result__isset;

class MgmtService_DeleteUser_result {
 public:

  MgmtService_DeleteUser_result() : success(0) {
  }

  virtual ~MgmtService_DeleteUser_result() throw() {}

  bool success;

  _MgmtService_DeleteUser_result__isset __isset;

  bool operator == (const MgmtService_DeleteUser_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MgmtService_DeleteUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MgmtService_DeleteUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MgmtService_DeleteUser_presult__isset {
  _MgmtService_DeleteUser_presult__isset() : success(false) {}
  bool success;
} _MgmtService_DeleteUser_presult__isset;

class MgmtService_DeleteUser_presult {
 public:


  virtual ~MgmtService_DeleteUser_presult() throw() {}

  bool* success;

  _MgmtService_DeleteUser_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MgmtService_GetUserInfo_args__isset {
  _MgmtService_GetUserInfo_args__isset() : name(false) {}
  bool name;
} _MgmtService_GetUserInfo_args__isset;

class MgmtService_GetUserInfo_args {
 public:

  MgmtService_GetUserInfo_args() : name("") {
  }

  virtual ~MgmtService_GetUserInfo_args() throw() {}

  std::string name;

  _MgmtService_GetUserInfo_args__isset __isset;

  bool operator == (const MgmtService_GetUserInfo_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const MgmtService_GetUserInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MgmtService_GetUserInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MgmtService_GetUserInfo_pargs {
 public:


  virtual ~MgmtService_GetUserInfo_pargs() throw() {}

  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MgmtService_GetUserInfo_result__isset {
  _MgmtService_GetUserInfo_result__isset() : success(false) {}
  bool success;
} _MgmtService_GetUserInfo_result__isset;

class MgmtService_GetUserInfo_result {
 public:

  MgmtService_GetUserInfo_result() {
  }

  virtual ~MgmtService_GetUserInfo_result() throw() {}

  MgmtUserInfo success;

  _MgmtService_GetUserInfo_result__isset __isset;

  bool operator == (const MgmtService_GetUserInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MgmtService_GetUserInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MgmtService_GetUserInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MgmtService_GetUserInfo_presult__isset {
  _MgmtService_GetUserInfo_presult__isset() : success(false) {}
  bool success;
} _MgmtService_GetUserInfo_presult__isset;

class MgmtService_GetUserInfo_presult {
 public:


  virtual ~MgmtService_GetUserInfo_presult() throw() {}

  MgmtUserInfo* success;

  _MgmtService_GetUserInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MgmtService_SetUserInfo_args__isset {
  _MgmtService_SetUserInfo_args__isset() : name(false), ui(false) {}
  bool name;
  bool ui;
} _MgmtService_SetUserInfo_args__isset;

class MgmtService_SetUserInfo_args {
 public:

  MgmtService_SetUserInfo_args() : name("") {
  }

  virtual ~MgmtService_SetUserInfo_args() throw() {}

  std::string name;
  MgmtUserInfo ui;

  _MgmtService_SetUserInfo_args__isset __isset;

  bool operator == (const MgmtService_SetUserInfo_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(ui == rhs.ui))
      return false;
    return true;
  }
  bool operator != (const MgmtService_SetUserInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MgmtService_SetUserInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MgmtService_SetUserInfo_pargs {
 public:


  virtual ~MgmtService_SetUserInfo_pargs() throw() {}

  const std::string* name;
  const MgmtUserInfo* ui;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MgmtService_SetUserInfo_result__isset {
  _MgmtService_SetUserInfo_result__isset() : success(false) {}
  bool success;
} _MgmtService_SetUserInfo_result__isset;

class MgmtService_SetUserInfo_result {
 public:

  MgmtService_SetUserInfo_result() : success(0) {
  }

  virtual ~MgmtService_SetUserInfo_result() throw() {}

  bool success;

  _MgmtService_SetUserInfo_result__isset __isset;

  bool operator == (const MgmtService_SetUserInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MgmtService_SetUserInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MgmtService_SetUserInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MgmtService_SetUserInfo_presult__isset {
  _MgmtService_SetUserInfo_presult__isset() : success(false) {}
  bool success;
} _MgmtService_SetUserInfo_presult__isset;

class MgmtService_SetUserInfo_presult {
 public:


  virtual ~MgmtService_SetUserInfo_presult() throw() {}

  bool* success;

  _MgmtService_SetUserInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MgmtService_CreateSpace_args__isset {
  _MgmtService_CreateSpace_args__isset() : uid(false), space(false), type(false) {}
  bool uid;
  bool space;
  bool type;
} _MgmtService_CreateSpace_args__isset;

class MgmtService_CreateSpace_args {
 public:

  MgmtService_CreateSpace_args() : uid(0), space("") {
  }

  virtual ~MgmtService_CreateSpace_args() throw() {}

  int64_t uid;
  std::string space;
  SpaceType::type type;

  _MgmtService_CreateSpace_args__isset __isset;

  bool operator == (const MgmtService_CreateSpace_args & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(space == rhs.space))
      return false;
    if (!(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const MgmtService_CreateSpace_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MgmtService_CreateSpace_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MgmtService_CreateSpace_pargs {
 public:


  virtual ~MgmtService_CreateSpace_pargs() throw() {}

  const int64_t* uid;
  const std::string* space;
  const SpaceType::type* type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MgmtService_CreateSpace_result__isset {
  _MgmtService_CreateSpace_result__isset() : success(false) {}
  bool success;
} _MgmtService_CreateSpace_result__isset;

class MgmtService_CreateSpace_result {
 public:

  MgmtService_CreateSpace_result() : success(0) {
  }

  virtual ~MgmtService_CreateSpace_result() throw() {}

  bool success;

  _MgmtService_CreateSpace_result__isset __isset;

  bool operator == (const MgmtService_CreateSpace_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MgmtService_CreateSpace_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MgmtService_CreateSpace_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MgmtService_CreateSpace_presult__isset {
  _MgmtService_CreateSpace_presult__isset() : success(false) {}
  bool success;
} _MgmtService_CreateSpace_presult__isset;

class MgmtService_CreateSpace_presult {
 public:


  virtual ~MgmtService_CreateSpace_presult() throw() {}

  bool* success;

  _MgmtService_CreateSpace_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MgmtService_DeleteSpace_args__isset {
  _MgmtService_DeleteSpace_args__isset() : uid(false), space(false) {}
  bool uid;
  bool space;
} _MgmtService_DeleteSpace_args__isset;

class MgmtService_DeleteSpace_args {
 public:

  MgmtService_DeleteSpace_args() : uid(0), space("") {
  }

  virtual ~MgmtService_DeleteSpace_args() throw() {}

  int64_t uid;
  std::string space;

  _MgmtService_DeleteSpace_args__isset __isset;

  bool operator == (const MgmtService_DeleteSpace_args & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(space == rhs.space))
      return false;
    return true;
  }
  bool operator != (const MgmtService_DeleteSpace_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MgmtService_DeleteSpace_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MgmtService_DeleteSpace_pargs {
 public:


  virtual ~MgmtService_DeleteSpace_pargs() throw() {}

  const int64_t* uid;
  const std::string* space;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MgmtService_DeleteSpace_result__isset {
  _MgmtService_DeleteSpace_result__isset() : success(false) {}
  bool success;
} _MgmtService_DeleteSpace_result__isset;

class MgmtService_DeleteSpace_result {
 public:

  MgmtService_DeleteSpace_result() : success(0) {
  }

  virtual ~MgmtService_DeleteSpace_result() throw() {}

  bool success;

  _MgmtService_DeleteSpace_result__isset __isset;

  bool operator == (const MgmtService_DeleteSpace_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MgmtService_DeleteSpace_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MgmtService_DeleteSpace_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MgmtService_DeleteSpace_presult__isset {
  _MgmtService_DeleteSpace_presult__isset() : success(false) {}
  bool success;
} _MgmtService_DeleteSpace_presult__isset;

class MgmtService_DeleteSpace_presult {
 public:


  virtual ~MgmtService_DeleteSpace_presult() throw() {}

  bool* success;

  _MgmtService_DeleteSpace_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MgmtService_GetSpaceList_args__isset {
  _MgmtService_GetSpaceList_args__isset() : uid(false) {}
  bool uid;
} _MgmtService_GetSpaceList_args__isset;

class MgmtService_GetSpaceList_args {
 public:

  MgmtService_GetSpaceList_args() : uid(0) {
  }

  virtual ~MgmtService_GetSpaceList_args() throw() {}

  int64_t uid;

  _MgmtService_GetSpaceList_args__isset __isset;

  bool operator == (const MgmtService_GetSpaceList_args & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    return true;
  }
  bool operator != (const MgmtService_GetSpaceList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MgmtService_GetSpaceList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MgmtService_GetSpaceList_pargs {
 public:


  virtual ~MgmtService_GetSpaceList_pargs() throw() {}

  const int64_t* uid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MgmtService_GetSpaceList_result__isset {
  _MgmtService_GetSpaceList_result__isset() : success(false) {}
  bool success;
} _MgmtService_GetSpaceList_result__isset;

class MgmtService_GetSpaceList_result {
 public:

  MgmtService_GetSpaceList_result() {
  }

  virtual ~MgmtService_GetSpaceList_result() throw() {}

  SpaceListRsp success;

  _MgmtService_GetSpaceList_result__isset __isset;

  bool operator == (const MgmtService_GetSpaceList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MgmtService_GetSpaceList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MgmtService_GetSpaceList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MgmtService_GetSpaceList_presult__isset {
  _MgmtService_GetSpaceList_presult__isset() : success(false) {}
  bool success;
} _MgmtService_GetSpaceList_presult__isset;

class MgmtService_GetSpaceList_presult {
 public:


  virtual ~MgmtService_GetSpaceList_presult() throw() {}

  SpaceListRsp* success;

  _MgmtService_GetSpaceList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MgmtService_GetSpaceInfo_args__isset {
  _MgmtService_GetSpaceInfo_args__isset() : uid(false), space(false) {}
  bool uid;
  bool space;
} _MgmtService_GetSpaceInfo_args__isset;

class MgmtService_GetSpaceInfo_args {
 public:

  MgmtService_GetSpaceInfo_args() : uid(0), space("") {
  }

  virtual ~MgmtService_GetSpaceInfo_args() throw() {}

  int64_t uid;
  std::string space;

  _MgmtService_GetSpaceInfo_args__isset __isset;

  bool operator == (const MgmtService_GetSpaceInfo_args & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(space == rhs.space))
      return false;
    return true;
  }
  bool operator != (const MgmtService_GetSpaceInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MgmtService_GetSpaceInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MgmtService_GetSpaceInfo_pargs {
 public:


  virtual ~MgmtService_GetSpaceInfo_pargs() throw() {}

  const int64_t* uid;
  const std::string* space;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MgmtService_GetSpaceInfo_result__isset {
  _MgmtService_GetSpaceInfo_result__isset() : success(false) {}
  bool success;
} _MgmtService_GetSpaceInfo_result__isset;

class MgmtService_GetSpaceInfo_result {
 public:

  MgmtService_GetSpaceInfo_result() {
  }

  virtual ~MgmtService_GetSpaceInfo_result() throw() {}

  SpaceInfoRsp success;

  _MgmtService_GetSpaceInfo_result__isset __isset;

  bool operator == (const MgmtService_GetSpaceInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MgmtService_GetSpaceInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MgmtService_GetSpaceInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MgmtService_GetSpaceInfo_presult__isset {
  _MgmtService_GetSpaceInfo_presult__isset() : success(false) {}
  bool success;
} _MgmtService_GetSpaceInfo_presult__isset;

class MgmtService_GetSpaceInfo_presult {
 public:


  virtual ~MgmtService_GetSpaceInfo_presult() throw() {}

  SpaceInfoRsp* success;

  _MgmtService_GetSpaceInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MgmtService_AddMetaServer_args__isset {
  _MgmtService_AddMetaServer_args__isset() : addr(false), port(false) {}
  bool addr;
  bool port;
} _MgmtService_AddMetaServer_args__isset;

class MgmtService_AddMetaServer_args {
 public:

  MgmtService_AddMetaServer_args() : addr(""), port(0) {
  }

  virtual ~MgmtService_AddMetaServer_args() throw() {}

  std::string addr;
  int32_t port;

  _MgmtService_AddMetaServer_args__isset __isset;

  bool operator == (const MgmtService_AddMetaServer_args & rhs) const
  {
    if (!(addr == rhs.addr))
      return false;
    if (!(port == rhs.port))
      return false;
    return true;
  }
  bool operator != (const MgmtService_AddMetaServer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MgmtService_AddMetaServer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MgmtService_AddMetaServer_pargs {
 public:


  virtual ~MgmtService_AddMetaServer_pargs() throw() {}

  const std::string* addr;
  const int32_t* port;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MgmtService_AddMetaServer_result__isset {
  _MgmtService_AddMetaServer_result__isset() : success(false) {}
  bool success;
} _MgmtService_AddMetaServer_result__isset;

class MgmtService_AddMetaServer_result {
 public:

  MgmtService_AddMetaServer_result() : success(0) {
  }

  virtual ~MgmtService_AddMetaServer_result() throw() {}

  bool success;

  _MgmtService_AddMetaServer_result__isset __isset;

  bool operator == (const MgmtService_AddMetaServer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MgmtService_AddMetaServer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MgmtService_AddMetaServer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MgmtService_AddMetaServer_presult__isset {
  _MgmtService_AddMetaServer_presult__isset() : success(false) {}
  bool success;
} _MgmtService_AddMetaServer_presult__isset;

class MgmtService_AddMetaServer_presult {
 public:


  virtual ~MgmtService_AddMetaServer_presult() throw() {}

  bool* success;

  _MgmtService_AddMetaServer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MgmtService_RmvMetaServer_args__isset {
  _MgmtService_RmvMetaServer_args__isset() : msaid(false) {}
  bool msaid;
} _MgmtService_RmvMetaServer_args__isset;

class MgmtService_RmvMetaServer_args {
 public:

  MgmtService_RmvMetaServer_args() : msaid(0) {
  }

  virtual ~MgmtService_RmvMetaServer_args() throw() {}

  int64_t msaid;

  _MgmtService_RmvMetaServer_args__isset __isset;

  bool operator == (const MgmtService_RmvMetaServer_args & rhs) const
  {
    if (!(msaid == rhs.msaid))
      return false;
    return true;
  }
  bool operator != (const MgmtService_RmvMetaServer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MgmtService_RmvMetaServer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MgmtService_RmvMetaServer_pargs {
 public:


  virtual ~MgmtService_RmvMetaServer_pargs() throw() {}

  const int64_t* msaid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MgmtService_RmvMetaServer_result__isset {
  _MgmtService_RmvMetaServer_result__isset() : success(false) {}
  bool success;
} _MgmtService_RmvMetaServer_result__isset;

class MgmtService_RmvMetaServer_result {
 public:

  MgmtService_RmvMetaServer_result() : success(0) {
  }

  virtual ~MgmtService_RmvMetaServer_result() throw() {}

  bool success;

  _MgmtService_RmvMetaServer_result__isset __isset;

  bool operator == (const MgmtService_RmvMetaServer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MgmtService_RmvMetaServer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MgmtService_RmvMetaServer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MgmtService_RmvMetaServer_presult__isset {
  _MgmtService_RmvMetaServer_presult__isset() : success(false) {}
  bool success;
} _MgmtService_RmvMetaServer_presult__isset;

class MgmtService_RmvMetaServer_presult {
 public:


  virtual ~MgmtService_RmvMetaServer_presult() throw() {}

  bool* success;

  _MgmtService_RmvMetaServer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class MgmtService_GetAllMetaServer_args {
 public:

  MgmtService_GetAllMetaServer_args() {
  }

  virtual ~MgmtService_GetAllMetaServer_args() throw() {}


  bool operator == (const MgmtService_GetAllMetaServer_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MgmtService_GetAllMetaServer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MgmtService_GetAllMetaServer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MgmtService_GetAllMetaServer_pargs {
 public:


  virtual ~MgmtService_GetAllMetaServer_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MgmtService_GetAllMetaServer_result__isset {
  _MgmtService_GetAllMetaServer_result__isset() : success(false) {}
  bool success;
} _MgmtService_GetAllMetaServer_result__isset;

class MgmtService_GetAllMetaServer_result {
 public:

  MgmtService_GetAllMetaServer_result() {
  }

  virtual ~MgmtService_GetAllMetaServer_result() throw() {}

  std::vector<int64_t>  success;

  _MgmtService_GetAllMetaServer_result__isset __isset;

  bool operator == (const MgmtService_GetAllMetaServer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MgmtService_GetAllMetaServer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MgmtService_GetAllMetaServer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MgmtService_GetAllMetaServer_presult__isset {
  _MgmtService_GetAllMetaServer_presult__isset() : success(false) {}
  bool success;
} _MgmtService_GetAllMetaServer_presult__isset;

class MgmtService_GetAllMetaServer_presult {
 public:


  virtual ~MgmtService_GetAllMetaServer_presult() throw() {}

  std::vector<int64_t> * success;

  _MgmtService_GetAllMetaServer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MgmtService_GetMetaServer_args__isset {
  _MgmtService_GetMetaServer_args__isset() : uid(false), space(false) {}
  bool uid;
  bool space;
} _MgmtService_GetMetaServer_args__isset;

class MgmtService_GetMetaServer_args {
 public:

  MgmtService_GetMetaServer_args() : uid(0), space("") {
  }

  virtual ~MgmtService_GetMetaServer_args() throw() {}

  int64_t uid;
  std::string space;

  _MgmtService_GetMetaServer_args__isset __isset;

  bool operator == (const MgmtService_GetMetaServer_args & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(space == rhs.space))
      return false;
    return true;
  }
  bool operator != (const MgmtService_GetMetaServer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MgmtService_GetMetaServer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MgmtService_GetMetaServer_pargs {
 public:


  virtual ~MgmtService_GetMetaServer_pargs() throw() {}

  const int64_t* uid;
  const std::string* space;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MgmtService_GetMetaServer_result__isset {
  _MgmtService_GetMetaServer_result__isset() : success(false) {}
  bool success;
} _MgmtService_GetMetaServer_result__isset;

class MgmtService_GetMetaServer_result {
 public:

  MgmtService_GetMetaServer_result() {
  }

  virtual ~MgmtService_GetMetaServer_result() throw() {}

  std::vector<int64_t>  success;

  _MgmtService_GetMetaServer_result__isset __isset;

  bool operator == (const MgmtService_GetMetaServer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MgmtService_GetMetaServer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MgmtService_GetMetaServer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MgmtService_GetMetaServer_presult__isset {
  _MgmtService_GetMetaServer_presult__isset() : success(false) {}
  bool success;
} _MgmtService_GetMetaServer_presult__isset;

class MgmtService_GetMetaServer_presult {
 public:


  virtual ~MgmtService_GetMetaServer_presult() throw() {}

  std::vector<int64_t> * success;

  _MgmtService_GetMetaServer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class MgmtServiceClient : virtual public MgmtServiceIf {
 public:
  MgmtServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  MgmtServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool Setup(const std::string& name, const std::string& passwd);
  void send_Setup(const std::string& name, const std::string& passwd);
  bool recv_Setup();
  void Close();
  void send_Close();
  void recv_Close();
  bool CreateUser(const std::string& name, const std::string& passwd);
  void send_CreateUser(const std::string& name, const std::string& passwd);
  bool recv_CreateUser();
  bool DeleteUser(const std::string& name);
  void send_DeleteUser(const std::string& name);
  bool recv_DeleteUser();
  void GetUserInfo(MgmtUserInfo& _return, const std::string& name);
  void send_GetUserInfo(const std::string& name);
  void recv_GetUserInfo(MgmtUserInfo& _return);
  bool SetUserInfo(const std::string& name, const MgmtUserInfo& ui);
  void send_SetUserInfo(const std::string& name, const MgmtUserInfo& ui);
  bool recv_SetUserInfo();
  bool CreateSpace(const int64_t uid, const std::string& space, const SpaceType::type type);
  void send_CreateSpace(const int64_t uid, const std::string& space, const SpaceType::type type);
  bool recv_CreateSpace();
  bool DeleteSpace(const int64_t uid, const std::string& space);
  void send_DeleteSpace(const int64_t uid, const std::string& space);
  bool recv_DeleteSpace();
  void GetSpaceList(SpaceListRsp& _return, const int64_t uid);
  void send_GetSpaceList(const int64_t uid);
  void recv_GetSpaceList(SpaceListRsp& _return);
  void GetSpaceInfo(SpaceInfoRsp& _return, const int64_t uid, const std::string& space);
  void send_GetSpaceInfo(const int64_t uid, const std::string& space);
  void recv_GetSpaceInfo(SpaceInfoRsp& _return);
  bool AddMetaServer(const std::string& addr, const int32_t port);
  void send_AddMetaServer(const std::string& addr, const int32_t port);
  bool recv_AddMetaServer();
  bool RmvMetaServer(const int64_t msaid);
  void send_RmvMetaServer(const int64_t msaid);
  bool recv_RmvMetaServer();
  void GetAllMetaServer(std::vector<int64_t> & _return);
  void send_GetAllMetaServer();
  void recv_GetAllMetaServer(std::vector<int64_t> & _return);
  void GetMetaServer(std::vector<int64_t> & _return, const int64_t uid, const std::string& space);
  void send_GetMetaServer(const int64_t uid, const std::string& space);
  void recv_GetMetaServer(std::vector<int64_t> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class MgmtServiceProcessor : virtual public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<MgmtServiceIf> iface_;
  virtual bool process_fn(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, int socket);
 private:
  std::map<std::string, void (MgmtServiceProcessor::*)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*)> processMap_;
  void process_Setup(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_Close(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_CreateUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_DeleteUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_GetUserInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_SetUserInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_CreateSpace(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_DeleteSpace(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_GetSpaceList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_GetSpaceInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_AddMetaServer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_RmvMetaServer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_GetAllMetaServer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_GetMetaServer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
 public:
  MgmtServiceProcessor(boost::shared_ptr<MgmtServiceIf> iface) :
    iface_(iface) {
    processMap_["Setup"] = &MgmtServiceProcessor::process_Setup;
    processMap_["Close"] = &MgmtServiceProcessor::process_Close;
    processMap_["CreateUser"] = &MgmtServiceProcessor::process_CreateUser;
    processMap_["DeleteUser"] = &MgmtServiceProcessor::process_DeleteUser;
    processMap_["GetUserInfo"] = &MgmtServiceProcessor::process_GetUserInfo;
    processMap_["SetUserInfo"] = &MgmtServiceProcessor::process_SetUserInfo;
    processMap_["CreateSpace"] = &MgmtServiceProcessor::process_CreateSpace;
    processMap_["DeleteSpace"] = &MgmtServiceProcessor::process_DeleteSpace;
    processMap_["GetSpaceList"] = &MgmtServiceProcessor::process_GetSpaceList;
    processMap_["GetSpaceInfo"] = &MgmtServiceProcessor::process_GetSpaceInfo;
    processMap_["AddMetaServer"] = &MgmtServiceProcessor::process_AddMetaServer;
    processMap_["RmvMetaServer"] = &MgmtServiceProcessor::process_RmvMetaServer;
    processMap_["GetAllMetaServer"] = &MgmtServiceProcessor::process_GetAllMetaServer;
    processMap_["GetMetaServer"] = &MgmtServiceProcessor::process_GetMetaServer;
  }

  virtual bool process(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot, int socket);
  virtual ~MgmtServiceProcessor() {}
};

class MgmtServiceMultiface : virtual public MgmtServiceIf {
 public:
  MgmtServiceMultiface(std::vector<boost::shared_ptr<MgmtServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MgmtServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<MgmtServiceIf> > ifaces_;
  MgmtServiceMultiface() {}
  void add(boost::shared_ptr<MgmtServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool Setup(const std::string& name, const std::string& passwd) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->Setup(name, passwd);
      } else {
        ifaces_[i]->Setup(name, passwd);
      }
    }
  }

  void Close() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->Close();
    }
  }

  bool CreateUser(const std::string& name, const std::string& passwd) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->CreateUser(name, passwd);
      } else {
        ifaces_[i]->CreateUser(name, passwd);
      }
    }
  }

  bool DeleteUser(const std::string& name) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->DeleteUser(name);
      } else {
        ifaces_[i]->DeleteUser(name);
      }
    }
  }

  void GetUserInfo(MgmtUserInfo& _return, const std::string& name) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->GetUserInfo(_return, name);
        return;
      } else {
        ifaces_[i]->GetUserInfo(_return, name);
      }
    }
  }

  bool SetUserInfo(const std::string& name, const MgmtUserInfo& ui) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->SetUserInfo(name, ui);
      } else {
        ifaces_[i]->SetUserInfo(name, ui);
      }
    }
  }

  bool CreateSpace(const int64_t uid, const std::string& space, const SpaceType::type type) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->CreateSpace(uid, space, type);
      } else {
        ifaces_[i]->CreateSpace(uid, space, type);
      }
    }
  }

  bool DeleteSpace(const int64_t uid, const std::string& space) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->DeleteSpace(uid, space);
      } else {
        ifaces_[i]->DeleteSpace(uid, space);
      }
    }
  }

  void GetSpaceList(SpaceListRsp& _return, const int64_t uid) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->GetSpaceList(_return, uid);
        return;
      } else {
        ifaces_[i]->GetSpaceList(_return, uid);
      }
    }
  }

  void GetSpaceInfo(SpaceInfoRsp& _return, const int64_t uid, const std::string& space) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->GetSpaceInfo(_return, uid, space);
        return;
      } else {
        ifaces_[i]->GetSpaceInfo(_return, uid, space);
      }
    }
  }

  bool AddMetaServer(const std::string& addr, const int32_t port) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->AddMetaServer(addr, port);
      } else {
        ifaces_[i]->AddMetaServer(addr, port);
      }
    }
  }

  bool RmvMetaServer(const int64_t msaid) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->RmvMetaServer(msaid);
      } else {
        ifaces_[i]->RmvMetaServer(msaid);
      }
    }
  }

  void GetAllMetaServer(std::vector<int64_t> & _return) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->GetAllMetaServer(_return);
        return;
      } else {
        ifaces_[i]->GetAllMetaServer(_return);
      }
    }
  }

  void GetMetaServer(std::vector<int64_t> & _return, const int64_t uid, const std::string& space) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->GetMetaServer(_return, uid, space);
        return;
      } else {
        ifaces_[i]->GetMetaServer(_return, uid, space);
      }
    }
  }

};

}} // namespace

#endif
