// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "MetaService.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace portals;

class MetaServiceHandler : virtual public MetaServiceIf {
 public:
  MetaServiceHandler() {
    // Your initialization goes here
  }

  int32_t SetupByName(const std::string& name, const std::string& passwd) {
    // Your implementation goes here
    printf("SetupByName\n");
  }

  int32_t SetupByID(const int64_t metaID, const std::string& key) {
    // Your implementation goes here
    printf("SetupByID\n");
  }

  int32_t Close() {
    // Your implementation goes here
    printf("Close\n");
  }

  void AddMetaServer(std::string& _return, const int64_t metaID) {
    // Your implementation goes here
    printf("AddMetaServer\n");
  }

  int32_t RmvMetaServer(const int64_t metaID) {
    // Your implementation goes here
    printf("RmvMetaServer\n");
  }

  int32_t ReportCap(const std::vector<space_type_e::type> & capType) {
    // Your implementation goes here
    printf("ReportCap\n");
  }

  int32_t ReportSpace(const space_type_e::type type, const std::vector<int64_t> & ids) {
    // Your implementation goes here
    printf("ReportSpace\n");
  }

};


